********************************
Supporting a New Baseband Format
********************************

This tutorial is meant for readers who want to add support for reading a
new file format into Baseband.  It uses implementing support for the
GUPPI file format as an example.


Baseband Code Structure
=======================

Baseband's source code is located under the :file:`baseband` directory.  The
:file:`_astropy_init.py` and :file:`conftest.py` files in this folder link 
Baseband with the `astropy-helpers module <https://github.com/astropy/astropy-helpers>`_
(which, among other things, enables the test suite and Sphinx documentation
builder).  :file:`version.py` is auto-generated by :file:`setup.py` in the
main directory.  None of these files require modification to support a new
format.

The code for reading and writing a particular file format is located in its
correspondingly named subdirectory.  How code is structured within these
follows a very similar pattern for all file formats - each subdirectory
contains:

- :file:`baseband/<format>/base.py` - defines a master ``open()`` read/write
  function, and classes for reading from and writing to files and data streams.
  These import dataframe container classes from ``frame.py``.
- :file:`baseband/<format>/frame.py` - defines classes that store dataframes
  and (in the case of VDIF) dataframe sets.  Classes for header I/O and
  storage are imported from ``header.py``, and those for the data from
  ``payload.py``.
- :file:`baseband/<format>/header.py` - defines classes for reading and writing
  dataframe headers.
- :file:`baseband/<format>/payload.py` - defines classes for reading and
  writing dataframe data.
- :file:`baseband/<format>/tests/test_<format>.py` - defines routines to test
  the above classes and functions.

Code that is common to (or base classes used by) both VDIF and Mark 5B file
formats is located in :file:`baseband/vlbi_base`.  This folder follows the same
pattern of files as above, with, for example, classes in 
:file:`baseband/vdif/header.py` inheriting from classes in 
:file:`baseband/vlbi_base/header.py`.

In addition to file format subdirectories, there are three others:

- :file:`baseband/data` - stores data snippets for testing.
- :file:`baseband/helpers` - functions and classes for reading a file sequence
  as if it were a single file.
- :file:`baseband/tests` - configuration files for the test suite.
  :file:`baseband/tests/test_conversion.py` houses tests for converting between
  file formats.


Deploying a New Format
=======================

To introduce a new file format, we follow the framework above and create
a subfolder named for the file format under the :file:`baseband` directory,
then create the requisite files within.  For GUPPI, the folder is
:file:`baseband/guppi`, and the file structure within is:

- :file:`baseband/guppi/base.py`
- :file:`baseband/guppi/frame.py`
- :file:`baseband/guppi/header.py`
- :file:`baseband/guppi/payload.py`
- :file:`baseband/guppi/tests/test_guppi.py` - note that this file is
  in the `:file:`baseband/guppi/tests/` subfolder.
